# main_orchestrator.py (or could be in a 'Orchestration' directory)

import os
import re
from Agents.Base_Agent import BaseAgent
from Agents.PRD_Creator_Agent import PRDCreatorAgent
from Agents.PRD_Reviewer_Agent import PRDReviewerAgent


class Orchestrator:
    """
    Orchestrates the interaction between various agents, specifically designed
    for the PRD creation and review workflow. This class allows for flexible
    addition and removal of agents and manages the iterative process.
    """

    def __init__(self, max_review_iterations: int = 3):
        """
        Initializes the Orchestrator with a dictionary to hold agents
        and sets the maximum number of review iterations.

        Args:
            max_review_iterations (int): The maximum number of times the
                                         PRD will be reviewed and revised.
        """
        self.agents = {}
        self.max_review_iterations = max_review_iterations
        self._initialize_core_agents()
        self.project_root = os.path.abspath(
            os.path.join(os.path.dirname(__file__), os.pardir))

    def _initialize_core_agents(self):
        """
        Initializes the core agents required for the PRD workflow
        (PRDCreatorAgent and PRDReviewerAgent) and adds them to the orchestrator.
        """
        try:
            creator_agent = PRDCreatorAgent()
            reviewer_agent = PRDReviewerAgent()
            self.add_agent("prd_creator", creator_agent)
            self.add_agent("prd_reviewer", reviewer_agent)
            print("Core agents (PRD Creator, PRD Reviewer) initialized and added.")
        except Exception as e:
            print(f"Error initializing core agents: {e}")
            raise  # Re-raise to indicate a critical setup failure

    def add_agent(self, name: str, agent_instance: BaseAgent):
        """
        Adds an agent instance to the orchestrator's registry.

        Args:
            name (str): A unique name/identifier for the agent.
            agent_instance (BaseAgent): An instance of a class inheriting from BaseAgent.
        """
        if not isinstance(agent_instance, BaseAgent):
            raise TypeError("Only instances of classes inheriting from BaseAgent can be added.")
        if name in self.agents:
            print(
                f"Warning: Agent '{name}' already exists and will be overwritten.")
        self.agents[name] = agent_instance
        print(f"Agent '{name}' added successfully.")

    def remove_agent(self, name: str):
        """
        Removes an agent from the orchestrator's registry.

        Args:
            name (str): The name/identifier of the agent to remove.
        """
        if name in self.agents:
            del self.agents[name]
            print(f"Agent '{name}' removed successfully.")
        else:
            print(f"Warning: Agent '{name}' not found.")

    def get_agent(self, name: str) -> BaseAgent:
        """
        Retrieves an agent instance by its name.

        Args:
            name (str): The name/identifier of the agent.

        Returns:
            BaseAgent: The agent instance.

        Raises:
            ValueError: If the agent is not found.
        """
        agent = self.agents.get(name)
        if not agent:
            raise ValueError(f"Agent '{name}' not found in orchestrator.")
        return agent

    def _is_prd_satisfactory(self, feedback: str) -> bool:
        """
        Determines if the PRD review feedback indicates a satisfactory document.
        This is a heuristic and can be improved with more sophisticated NLP.

        Args:
            feedback (str): The review feedback generated by the PRDReviewerAgent.

        Returns:
            bool: True if the feedback suggests the PRD is satisfactory, False otherwise.
        """
        # Look for positive keywords or absence of strong negative indicators
        feedback_lower = feedback.lower()
        positive_cues = ["looks good", "well done", "no major issues",
                         "satisfactory", "ready for", "minor adjustments"]
        negative_cues = ["needs significant revision", "major issues",
                         "incomplete", "ambiguous", "not clear enough"]

        # If any strong negative cues are present, it's not satisfactory
        if any(cue in feedback_lower for cue in negative_cues):
            return False

        # If positive cues are present AND no strong negative cues, consider it satisfactory
        if any(cue in feedback_lower for cue in positive_cues):
            # Also, check if there are "Prioritized Recommendations" section that is empty or very minimal
            # This requires more robust parsing, but for now, we'll keep it simple.
            # A good heuristic might be to check if the 'Prioritized Recommendations' section is empty or very short.
            # For this example, we'll assume absence of strong negative cues is sufficient.
            return True

        # If neither strong positive nor strong negative cues, assume more work is needed.
        return False

    def run_prd_workflow(self, front_end_reqs: str, middleware_reqs: str, backend_reqs: str, other_details: str) -> tuple[str, str]:
        """
        Runs the iterative PRD creation and review workflow.

        Args:
            front_end_reqs (str): Description of front-end requirements.
            middleware_reqs (str): Description of middleware requirements.
            backend_reqs (str): Description of backend requirements.
            other_details (str): Any additional project details or requirements.

        Returns:
            tuple[str, str]: A tuple containing the final generated PRD document content
                             and the full path to the saved PRD file.
        """
        prd_creator = self.get_agent("prd_creator")
        prd_reviewer = self.get_agent("prd_reviewer")

        current_prd_content = None
        saved_prd_path = None
        previous_feedback = None

        print("\n--- Starting PRD Generation Workflow ---")

        for iteration in range(1, self.max_review_iterations + 1):
            print(f"\n--- Iteration {iteration} ---")
            print(f"Generating/Revising PRD...")
            current_prd_content, saved_prd_path = prd_creator.generate(
                front_end_reqs=front_end_reqs,
                middleware_reqs=middleware_reqs,
                backend_reqs=backend_reqs,
                other_details=other_details,
                previous_feedback=previous_feedback  # Pass feedback for revision
            )
            print(f"PRD Generated/Revised. Saved to: {saved_prd_path}")

            print(f"Reviewing PRD...")
            review_feedback = prd_reviewer.generate(
                prd_document=current_prd_content)
            print(f"Review Feedback:\n{review_feedback}")

            if self._is_prd_satisfactory(review_feedback):
                print(
                    f"\n--- PRD is satisfactory after {iteration} iterations. ---")
                return current_prd_content, saved_prd_path
            else:
                print(
                    "PRD requires further revisions. Incorporating feedback for next iteration.")
                # Store feedback for the next generation call
                previous_feedback = review_feedback

        print(
            f"\n--- Max iterations ({self.max_review_iterations}) reached. Returning last generated PRD. ---")
        return current_prd_content, saved_prd_path


# Example Usage (assuming you have Base_Agent, PRD_Creator_Agent, PRD_Reviewer_Agent in 'Agents' directory)
if __name__ == "__main__":
    # Ensure OPENAI_API_KEY is set in your environment variables or .env file
    # Example .env content:
    # OPENAI_API_KEY="your_openai_api_key_here"

    # Define some example requirements
    front_end = "A responsive web interface with user authentication, a dashboard showing project summaries, and forms for adding/editing project details."
    middleware = "RESTful APIs for data access, user session management, business logic for project calculations, and integration with a notification service."
    backend = "PostgreSQL database for storing project data, user data, and configurations. User authentication system (JWT), data validation, and background task processing."
    other = "The application should be cloud-agnostic and support multi-tenancy. Initial deployment on AWS. Must have robust error logging."

    try:
        orchestrator = Orchestrator(max_review_iterations=3)

        # You can add more agents here if needed, for example:
        # from Agents.WBS_Creator_Agent import WBSCreatorAgent # Assuming you have one
        # wbs_agent = WBSCreatorAgent()
        # orchestrator.add_agent("wbs_creator", wbs_agent)

        final_prd_content, final_prd_path = orchestrator.run_prd_workflow(
            front_end_reqs=front_end,
            middleware_reqs=middleware,
            backend_reqs=backend,
            other_details=other
        )

        print(f"\n--- Workflow Completed ---")
        print(f"Final PRD saved at: {final_prd_path}")
        # print(f"Final PRD Content:\n{final_prd_content}")

    except Exception as e:
        print(f"An error occurred during orchestration: {e}")
